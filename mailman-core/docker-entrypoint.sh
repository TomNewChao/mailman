#! /bin/bash
set -e

function wait_for_postgres () {
	# Check if the postgres database is up and accepting connections before moving forward.
  # install postgresql-odbc-devel
	until psql $DATABASE_URL -c '\l'; do
		>&2 echo "Postgres is unavailable - sleeping"
		sleep 1
	done
	>&2 echo "Postgres is up - continuing"
}

function wait_for_mysql () {
	# Check if MySQL is up and accepting connections.
	HOSTNAME=$(python3 -c "from urllib.parse import urlparse; o = urlparse('$DATABASE_URL'); print(o.hostname);")
	until mysqladmin ping --host "$HOSTNAME" --silent; do
		>&2 echo "MySQL is unavailable - sleeping"
		sleep 1
	done
	>&2 echo "MySQL is up - continuing"
}

function setup_database () {
	if [[ ! -v DATABASE_URL ]]
	then
		echo "Environemnt variable DATABASE_URL should be defined..."
		exit 1
	fi

	# Translate mysql:// urls to mysql+mysql:// backend:
	if [[ "$DATABASE_URL" == mysql://* ]]; then
		DATABASE_URL="mysql+pymysql://${DATABASE_URL:8}"
		echo "Database URL was automatically rewritten to..."
	fi

	# If DATABASE_CLASS is not set, guess it for common databases:
	if [ -z "$DATABASE_CLASS" ]; then
		if [[ ("$DATABASE_URL" == mysql:*) ||
				("$DATABASE_URL" == mysql+*) ]]; then
			DATABASE_CLASS=mailman.database.mysql.MySQLDatabase
		fi
		if [[ ("$DATABASE_URL" == postgres:*) ||
				("$DATABASE_URL" == postgres+*) ]]; then
			DATABASE_CLASS=mailman.database.postgresql.PostgreSQLDatabase
		fi
	fi

	cat >> /etc/mailman.cfg <<EOF
[database]
class: $DATABASE_CLASS
url: $DATABASE_URL

EOF
}


# 1.Start to generate the config file.
echo "# This file is autogenerated at container startup." > /etc/mailman.cfg

# 2.Check env
# check the env about: MM_HOSTNAME, SMTP_HOST, SMTP_PORT, if not, set them to default values
if [[ ! -v MM_HOSTNAME ]]; then
	export MM_HOSTNAME=`hostname -i`
fi

if [[ ! -v SMTP_HOST ]]; then
	export SMTP_HOST='172.17.0.2'
fi

if [[ ! -v SMTP_PORT ]]; then
	export SMTP_PORT=25
fi

# check if REST port, username, and password are set, if not, set them to default values.
if [[ ! -v MAILMAN_REST_PORT ]]; then
	export MAILMAN_REST_PORT='8001'
fi

if [[ ! -v MAILMAN_REST_USER ]]; then
	export MAILMAN_REST_USER='restadmin'
fi

if [[ ! -v MAILMAN_REST_PASSWORD ]]; then
	export MAILMAN_REST_PASSWORD='restpass'
fi


# check the env about: DATABASE_URL,DATABASE_TYPE; assume that postgres is being used if DATABASE_URL is defined.
if [[ ! -v DATABASE_URL ]]; then
	echo "DATABASE_URL is not defined. Using sqlite database..."
else
	setup_database
fi
if [[ "$DATABASE_TYPE" = 'postgres' ]]
then
	wait_for_postgres
elif [[ "$DATABASE_TYPE" = 'mysql' ]]
then
	wait_for_mysql
fi

# set hyperkitty url and api key to conncet mailman-web
if [[ ! -v HYPERKITTY_API_KEY ]]; then
	echo "HYPERKITTY_API_KEY not defined, please set this environment variable..."
	echo "exiting..."
	exit 1
fi

if [[ ! -v HYPERKITTY_URL ]]; then
	echo "HYPERKITTY_URL not set, using the default value of http://mailman-web:8000/hyperkitty"
	export HYPERKITTY_URL="http://mailman-web:8000/hyperkitty/"
fi

# 3.Generate /etc/mailman.cfg and /etc/mailman-hyperkitty.cfg
# Generate a basic mailman.cfg.
cat >> /etc/mailman.cfg << EOF
[runner.retry]
sleep_time: 10s

[webservice]
hostname: $MM_HOSTNAME
port: $MAILMAN_REST_PORT
admin_user: $MAILMAN_REST_USER
admin_pass: $MAILMAN_REST_PASSWORD

[archiver.hyperkitty]
class: mailman_hyperkitty.Archiver
enable: yes
configuration: /etc/mailman-hyperkitty.cfg

EOF

cat > /etc/postfix-mailman.cfg << EOF
[postfix]
transport_file_type: regex
# While in regex mode, postmap_command is never used, a placeholder
# is added here so that it doesn't break anything.
postmap_command: true
EOF

# Generate a basic configuration to use exim
cat > /tmp/exim-mailman.cfg <<EOF
[mta]
incoming: mailman.mta.exim4.LMTP
outgoing: mailman.mta.deliver.deliver
lmtp_host: $MM_HOSTNAME
lmtp_port: 8024
smtp_host: $SMTP_HOST
smtp_port: $SMTP_PORT
smtp_user: $EMAIL_HOST_USER
smtp_pass: $EMAIL_HOST_PASSWORD
configuration: python:mailman.config.exim4

EOF

# Generate a basic configuration to use postfix.
cat > /tmp/postfix-mailman.cfg <<EOF
[mta]
incoming: mailman.mta.postfix.LMTP
outgoing: mailman.mta.deliver.deliver
lmtp_host: $MM_HOSTNAME
lmtp_port: 8024
smtp_host: $SMTP_HOST
smtp_port: $SMTP_PORT
smtp_user: $EMAIL_HOST_USER
smtp_pass: $EMAIL_HOST_PASSWORD
configuration: /etc/postfix-mailman.cfg

EOF

if [ "$MTA" == "exim" ]
then
	echo "Using Exim configuration"
	cat /tmp/exim-mailman.cfg >> /etc/mailman.cfg
elif [ "$MTA" == "postfix" ]
then
	echo "Using Postfix configuration"
	cat /tmp/postfix-mailman.cfg >> /etc/mailman.cfg
else
	echo "No MTA environment variable found, defaulting to Exim"
	cat /tmp/exim-mailman.cfg >> /etc/mailman.cfg
fi

rm -f /tmp/{postfix,exim}-mailman.cfg

if [[ -e /opt/mailman/mailman-extra.cfg ]]
then
	echo "Found configuration file at /opt/mailman/mailman-extra.cfg"
	cat /opt/mailman/mailman-extra.cfg >> /etc/mailman.cfg
fi

# Generate a basic mailman-hyperkitty.cfg.
cat > /etc/mailman-hyperkitty.cfg <<EOF
[general]
base_url: $HYPERKITTY_URL
api_key: $HYPERKITTY_API_KEY
EOF

# 4.mailman aliases
mailman --run-as-root aliases

# exec su-exec mailman "$@"
exec $@
